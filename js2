    (193)API 和Web API
    BOM浏览器功能 DOM页面元素

    (195)DOM
    文档对象模型 标准编程接口
    DOM树
    文档:一个页面就是一个文档，DOM中使用document表示
    元素:页面中的所有标签都是元素，DOM中使用element表示
    节点:网页中所有内容都是节点(标签、属性、文本、注释)node表示

    (196)getElementById获取元素
    get获得 element元素 by通过 id是字符串加''
    var timer =document.getElementById('time')

    console.dir()打印我们返回的元素对象 更好的查看里面的属性和方法

    (197)getElementsByTagName获取某类标签元素
    getElementsByTagName()方法可以返回带有标签名的对象的集合，以伪数组的形式存储的
    没有这个元素返回为空的伪数组
    var lis =document.getElementsByTagName('li')

    var ol =document.getElementById('ol')
    ol.document.getElementsByTagName('li')

    var ol =document.getElementsByTagName('ol')
    ol[0].document.getElementsByTagName('li')

    (198)H5新增获取元素方式
    document.getElementsByClassName('类名')根据类名返回元素对象集合

    document.querySelector 返回指定选择器的第一个元素对象
    document.querySelector('.box')('#box')('li')

    document.querySelectorAll 返回指定选择器的所有元素对象要加.#

    (199)获取body和html元素
    获取body document.body

    获取html document.documentElement 

    (200)事件三要素
    事件源 事件类型 事件处理程序
    事件源 事件被触发对象
    var btn =document.getElementById('btn')

    事件类型 如何触发 什么事件 比如鼠标点击(onclick)还是鼠标经过 键盘按下

    事件处理程序 通过一个函数赋值的方式 完成
    btn.onclick=function(){
        alert('123');
    }

    (201)执行事件过程
    获取事件源  
    var btn =document.getElementById('btn')
    绑定事件
    btn.onclick
    添加事件处理程序
    
    onclick     点击触发
    onmouseover 经过
    onmouseout  离开
    onfocus     获取鼠标焦点触发
    onblur      失去鼠标焦点触发
    onmousemove 鼠标移动触发
    onmouseup   鼠标弹起触发
    onmousedown 鼠标按下触发

    (202)操作元素 修改元素内容
    element.innerText 
    从起始位置到终止位置的内容，去除html标签的同时空格和换行也会去掉
    element.innerHTML 
    起始位置到终止位置的全部内容，包括html标签，保留空格和换行

    (204)操作元素 修改元素属性
    img.src='jpg'

    (206)操作元素 修改表达属性
    btn.disabled=true 被禁用
    this.disabled

    (209)操作元素 修改样式属性
    element.style 行内样式操作
    element.className 类名样式操作

    this.style.backgroundColor

    (213)使用className修改样式属性
    element.className='a'改类名

    (216)排他思想

    (217)百度换肤效果
    var imgs =document.querySelector('.baidu').querySelectorAll('img');
    for(var i=0;i<imgs.length;i++){
        imgs[i].onclick=function(){
            document.body.style.backgroundImage='url('+this.src+')';
        }
    }

    (221)获取自定义属性值
    var div =document.querySelector('div')
    element.属性
    div.id 

    获取自定义属性
    element.getAttribute('属性') 
    div.getAttribute('id')

    (222)移除自定义属性值
    设置元素属性
    div.id='test'

    element.setAttribute('属性','值') 用于自定义

    移除 
    element.removeAttribute('属性')

    (226)H5自定义属性
    data-
    element.dataset.index 或者element.dataset[index]
    驼峰命名

    (228)节点操作之父节点
    node.parentNode
    得到最近父节点

    (229)子节点
    xxx.childNodes
    包含元素和文本节点

    获取元素节点
    var ul=document.querySelector('ul')
    for(var i=0;i<ul.childNodes.length;i++){
        if(ul.childNodes[i].nodeType=1){
            console.log(ul.childNodes[i]);
        }
    }

    xxx.children

    (230)第一个元素和最后一个
    xxx.firstChild
    xxx.lastChild

    xxx.firstElementChild
    xxx.lastElementChild

    xxx.children[0]

    (232)兄弟节点
    xx.nextSibling(包含文本和元素)
    xx.previousSibling

    xx.nextElementSibling
    xx.previousElementSibling

    (233)创建和添加节点
    document.createElement('xx')
    添加节点
    node(父节点).appendChild(child(子节点)) 后面加
    node.insertBefore(child,指定元素) 前面加

    (235)删除节点
    node.removeChild(child)

    阻止跳转 javascript:;

    (237)复制节点
    node.cloneNode() 括号为空或者false是浅拷贝 true深拷贝

    (238)动态生成表格 创建学生数据
    var datas =[{
        name:'22',
    }]

    (244)document.write创建元素
    页面重汇

    (245)innerHTML和reateElement效率
    innerHTML创建多个元素效率更高(不要拼接字符串，采用数组形式拼接)结构复杂
    createElement创建多个元素效率稍微低，但是结构清晰

    (248)注册事件两种方式
    传统方式 只能设置一个事件

    方法监听注册方式
    eventTarget(目标对象).addEventListener(type,listener[,useCapture])
    按照注册事件依次执行
    type:事件类型字符串 click
    listener:事件处理函数，事件发生时，会调用监听函数
    useCapture:可选参数，是一个布尔值默认是false

    btns[1].addEventListener('click',function(){

    })

    (249)attachEvent注册事件

    (250)删除事件(解绑事件)
    传统
    .onclick=null

    addEventListener
     btns[1].addEventListener('click',fn)
     function fn(){
     btns[1].removeEventListener('click',fn)
     }

    (252)DOM事件流代码验证
     useCapture:可选参数，是一个布尔值默认是false
    false是冒泡阶段
    true是捕获阶段
    onblur、onfocus、onmouseenter、onmouseleave没有冒泡

    (253)什么是事件对象
    function(event){}事件对象只有有了事件才会存在，是系统自动创建的
    是一系列相关数据的集合 跟事件相关 鼠标 键盘
    可以自己命名

    (254)e.targer和this区别
    e.targer返回触发的点击事件

    this返回的是绑定事件和currentTarget一样

    (255)阻止默认行为
    e.type 返回事件的类型 click

    e.preventDefault()

    (256)阻止冒泡
    e.stopPropagation()

    (257)事件委托
    事件监听器设置在其父节点上，利用事件对象的target来找到当前点击的li，事件冒泡到ul有注册事件就好触发

    (258)禁止选中文字和右键菜单
    禁止右键
    addEventListener('contextmenu',function(e){
        e.preventDefault()
    })

    禁止选中selectstart

    (259)获得鼠标在页面中的坐标
    e.clientX 返回鼠标相对于窗口可视区的x坐标
    pageX 返回鼠标相对于文档页面的x坐标
    screenX 返回鼠标相对于电脑屏幕的x坐标

    (260)跟随鼠标的天使
    mousemove 
    var x=e.pageX
    pic.style.left=x+'px'

    (261)键盘事件
    onkeyup 某个键盘按键被松开时触发
    onkeydown 某个键盘按键被按下时触发
    onkeypress 某个键盘按键被按下时触发 但是不识别功能键 ctrl shift 箭头
    down press up

    (262)keyCode判断用户按下哪个键
    e.keyCode 
    down和up不区分字母大小写

    (263)按键获取焦点
    if(e.keyCode===83){
        search.focus();
    }

    (267)BOM
    浏览器对象模型，提供独立于内容而与浏览器窗口进行交互的对象核心对象是window

    (268)页面加载事件
    window.onload是窗口加载事件 当文档完全加载完后执行
    window.addEventListener('load',function) 没有限制

    DOMContentLoaded事件触发 DOM加载完毕后不包含图片等

    (269)调整窗口大小事件
    window.onresize=function
    window.addEventListener('resize',function)
    调整窗口大小加载事件，当触发时就调用的处理函数

    window.innerWidth屏幕宽度

    (270)定时器setTimeout
    window.setTimeout(调用函数,延时时间)
    setTimeout(调用函数名,延时时间)
    setTimeout('调用函数()',延时时间)

    (271)回调函数
    回调函数callback 回头函数 上一件干完

    (272)清除定时器clearTimeout
    window.clearTimeoout(定时器名字)

    (273)定时器 setInterval
    每隔延时时间调用一次
    window.setInterval(调用函数,延时时间)
    setInterval(调用函数名,延时时间)
    setInterval('调用函数()',延时时间)

    (274)倒计时

    (275)清除定时器clearInterval
    window.clearInterval(定时器名字)
    定时器名字进行全局变量
    
    (277)this指向问题
    1全局作用域或者普通函数中this指向全局对象window

    2方法中
    谁调用指向谁

    3构造函数中this指向构造函数

    (278)同步和异步
    同步 上一个结束执行下个
    异步 同时做多个事情

    (279)同步任务和异步任务执行过程
    回调函数作为异步任务
    普通事件 click、resize
    资源加载 load。error
    定时器setTimeout、setInterval

    (280)执行机制
    事件循环

    (281)location对象常见属性
    统一资源定位符
    protocol://host[:port]/path/[?query]#fragment
    http://www.itcast.cn/index.html?name=andy&age=18#link
    protocol 通信协议
    host     主机 域名
    prot     端口号 可选 省略时使用默认端口
    path     路径 
    query    参数 以键值对的形式 通过&符号分隔
    fragment 片段#后面内容 常见于链接

    location.href       获取或者设置 整个URL
    location.host       返回主机 域名
    location.port       返回端口号 如果未写返回 空字符串
    location.pathname   返回路径
    location.search     返回参数
    location.hash       返回片段

    (282)5秒后跳转页面

    (283)获取url参数
    substr()截取
    split('')分隔

    (284)location常见方法
    location.assign()   跟href一样 可以跳转 重定向
    location.replace()  替换当前页面，不能后退
    location.reload()   重新加载页面，相对于刷新或者f5 如果参数为true强制刷新ctrl+f5

    (285)navigator对象
    userAgent

    (286)history对象
    back()后退
    forward()前进
    go(参数) 参数是1前进一个页面 -1后退1个页面
   




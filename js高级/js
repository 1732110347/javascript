2 数据类型
  基本(值)类型
  String:任意字符串
  Number:任意数字
  boolean: true/false
  undefined:undefined
  null:null
  对象 引用
  Object:任意对象
  Function:一种特别的对象 可以执行
  Array:一种特别的对象 数值下标,内部数据

  判断类型
  typeof 返回数据类型的字符串表达 undefined 数值 字符串 布尔值 function  不能判断null与object object与array
  instanceof 判断对象的具体类型  a instanceof Object a是不是Object实例
  === 可以判断 undefined null

 ()调用函数
 
3 相关问题
 undefined代表定义未赋值
 null 定义赋值了为null 表明将要赋值为对象

4 数据 变量 内存

5 相关问题1
 var a= xxx 
 基本数据就是保存这个数据
 对象就是保存对象的地址值

 两个引用变量指向同一个对象，通过一个变量修改对象内部数据，
 另一个变量看到的是修改之后的数据
 var a={name:'xx'}
 var b=a 
 b.age=12
 a.age  =12

 两个引用变量指向同一个对象，让其中应该引用变量指向另一个对象，
 另一个引用变量仍然指向前应该对象
         var a={age:12}
        var b=a
        a={age:13}
        function fun(obj){
            obj={age:15}
        }
        fun(a)
        console.log(a.age);13

6 相关问题2
 js调用函数时传递变量参数时，是值传递

js管理内存
 1内存生命周期
 分配小内存空间，得到它的使用权
 存储数据，可以反复进行操作
 释放小内存空间

 2释放内存
 局部变量 函数指向完自动释放
 对象 成为垃圾对象==>垃圾回收器回收

7 高级 对象 
 1 什么是对象
 多个数据的封装体
 用来保存多个数据容器
 一个对象代表现实的一个事物

 2为什么用对象
 统一管理多个数据

 3对象的组成
 属性 属性名(字符串)和属性值
 方法 一种特别的属性 属性是函数

 4.访问对象内部数据
 xx.属性名  xx.方法名()
 属性名包含特殊字符不能用普通方式 xx['xx']='xx'
 变量名不确定
 var xx='xx'
 var xxx='xxx'
 xxxx[xx]=xxx

8 函数 
 1什么是函数

 2为什么要用函数
 提高代码复用
 
 3如何定义函数
 函数声明
 表达式
 
 function fn1 (){}
 var fn2=function(){}

 4如何调用 执行 函数
 xx() 直接调用
 xx.xxx() 通过对象调用
 new xx() new调用
 xx.call/apply(obj)=obj.xx() 可以让一个函数成为指定任意对象的方法进行调用

9 回调函数
 1什么是回调函数
 你定义的
 你没有调
 但最终执行了

 2常见
 dom事件回调函数
 定时器回调
 ajax请求
 生命周期

10 IIFE
 1理解
 立即执行调用函数
 (function(){})()匿名函数自调用

 2作用
 隐藏实现
 不会污染外部命名空间

 $().test()
 是一个函数 执行后返回的是一个对象

11 this
 1 this是什么
 任何函数本质上都是对象来调用
 所有函数内部都有一个变量this
 它的值是调用函数的当前对象

 2如何确定this
 test() window
 p.test() p
 new test() 新创建的对象
 p.call(obj) obj


 1. 以函数的形式调用时，this永远都是window
 2. 以方法的形式调用时，this就是调用方法的对象
 3. 以构造函数的形式调用时，this就是新创建的对象
 4. 使用call和apply调用时，this就是指定的那个对象
 5. 在全局作用域中this代表window

12 分号
 1js一条语句的后面可以不加分号

 3 小括号开头前的一条语句
    中括号开头的前一条语句
    加分号

  4 在行首加分号

14 复习
 
15 prototype
 1函数prototype属性 
 默认指向一个object空对象 (即 原型对象)
 原型对象中有一个属性constructor。指向函数对象

 2 给原型对象添加属性(一般是方法)
 作用 函数的所有实例对象自动拥有原型中的属性 方法  实例对象可以被访问
 function Fun(){}
 Fun.prototype.test=function(){}
 var fun=new Fun()
 fun.test()

 constructor指向原函数对象
 Fun.prototype.constructor===Fun

16 显式原型与隐式
 1每个函数function都有一个prototype,即是显式原型 属性
 2 每个实例对象都有一个 __proto__ 可称为隐式原型  属性
 3 对象的隐式原型的值为其对应构造函数的显式原型的值
 Fn.prototype===fn.__proto__
 4 内存结构
 5 函数prototype 属性 在定义函数时自动添加的 默认值是一个空object对象
   对象的__proto__属性 创建对象时自动添加的，默认值为构造函数的prototype属性值
   程序员能直接操作显式原型 但不能直接操作隐式原型 es6之前

17 原型链
 1原型链 图解
 访问一个对象的属性时
  先在自身属性中查找，找到返回
  如果没有，再沿着__proto__上找
  最终没有找到，返回undefined
 别名 隐式原型链
 作用 查找对象的属性 方法

 2构造函数/原型/实体对象的关系
  隐式原型指向显式
 3 构造函数/原型/实体对象的关系2

18补充
 1函数的显示原型指向的对象默认是空object实例对象  但object不满足
 Fn.prototype instanceof Object true
 Object.prototype instanceof Object false
 Function.prototype instanceof Object true

 2 所有函数都是Function的实例 包括Function
 Function.__proto__===Function.prototype

 Object的原型对象是原型链的尽头
 Object.prototype.__proto__  null

19 属性问题
 1读取对象的属性值 会自动到原型链中查找
 2设置对象属性值时 不会查找原型链，如果当前对象中没有此属性，直接添加此属性并设置其值
 3方法一般定义在原型中中，属性一般通过构造函数定义在对象本身上

20 探索instanceof
 1instanceof是如何判断的
 表达式 A instanceof B 
 如果B函数的显示原型对象在A对象的原型链上，返回true，否则返回false
 2 Function是通过new自己产生的实例

 Object instanceof Object true
 Function instanceof Function true
 Function instanceof Object true
 Object instanceof Function true
 function Foo(){}
 Object instanceof Foo false

21 原型 面试题
      function A(){

        }
        A.prototype.n=1
        var b=new A()
        A.prototype={
            n:2,
            m:3
        }
        var c=new A()
        console.log(b.n,b.m,c.n,c.m); //1 undefined 2 3


22 变量提升与函数
 1 变量声明提升
 通过var定义(声明)的变量,在定义语句之前就可以访问到
 值：undefined

 2函数声明提升
 通过function声明的函数，在之前就可以直接调用
 值：函数定义(对象)

 3 变量提升和函数提升是如何产生的

23 执行上下文
 1 全局代码 函数代码局部

 2全局执行上下文
 在执行全局代码前将window确定为全局执行上下文
 对全局数据进行预处理
 var定义的全局变量==>undefined 添加为window属性
 function声明的全局函数==>赋值(fun),添加为window方法
 this==>赋值(window)
 开始执行全局代码

 3 函数执行上下文
 在调用函数，准备执行函数体之前，创建对应的函数执行上下文对象
 对局部数据进行预处理
 形参变量==>赋值(实参)==>添加为指向上下文的属性
 arguments==>辅助(实参列表) 添加为执行上下文的属性   伪数组
 var定义的局部变量==>undefined 添加为执行上下文的属性
 function声明的函数==>赋值(fun) 添加为执行上下文的属性
 this==>赋值 调用函数的对象
 开始执行函数体代码

24 执行上下文栈
 1 在全局代码执行前 js引擎就会创建一个栈来存储管理所有的执行上下文对象
 2 在全局执行上下文(window)确定后 将其添加到栈中 压栈
 3 在函数执行完上下文创建后 将其添加到栈中
 4 在当前函数执行完后 将栈顶的对象移除 出栈
 5 当所有的代码执行完后 栈中只剩下window
 
25 面试题

26 复习

27 作用域与作用链

28 作用域 面试

29 循环遍历加监听

30 闭包理解

31 常见的闭包

32 闭包的作用

33 闭包的生命周期

34 闭包应用 自定义js模块

35 内存溢出与内存泄露

36 面试题

37 对象创建模式

38 原型链继承

39 组合继承

40 复习

41 闭包终极面试题

42 进程与线程

43 浏览器内核

44 定时器引发

45 js是单线程执行的

46 事件循环模型

47 H5 Web Workers 多线程

48 复习




















